{"version":3,"sources":["logo.svg","component/ReTweet.js","component/twitterclone.js","App.js","reportWebVitals.js","index.js"],"names":["Style","styled","div","ReTweet","props","useState","topTen","setTopTen","displayTweets","setDisplayTweets","useEffect","console","log","undefined","location","state","DisplayTweets","obj","sort","a","b","count","slice","Retweeting","id","i","length","className","to","pathname","xmlns","width","height","fill","viewBox","fill-rule","d","map","index","tweet","class","onClick","e","icon","faRetweet","TwitterClone","newTweet","setNewTweet","messagePresent","setMessagePresent","charCount","setCharCount","errorMessage","setErrorMessage","tweetsSet","show","onHide","Header","closeButton","Title","Body","type","maxLength","value","onChange","target","concat","displayTweet","App","rel","href","integrity","crossorigin","src","path","exact","render","DisplayTweet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9506298f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons';\n\nimport * as Icons from 'react-bootstrap-icons';\nimport { Link } from 'react-router-dom';\nimport DisplayTweets from './data/DisplayTweet.json';\n\n\nconst Style = styled.div`\n.anonymousfont{ \nfont-weight: bold;\nfont-style: italic;\n}\n.card{\n    \n    width:500px;\n}\n.center {\n    margin: auto;\n    width: 50%;    \n    padding: 10px;       \n  }\n`\n\nconst ReTweet = (props) => {\n    const size = 5;\n    const [topTen, setTopTen] = useState([]);\n    const [displayTweets, setDisplayTweets] = useState([]);\n\n    useEffect(() => {\n        console.log(props);\n        if (props.location.state == undefined) {\n            setDisplayTweets(DisplayTweets);\n        }\n        else {\n            setDisplayTweets(props.location.state.displayTweets);\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        var obj = [...displayTweets];\n        obj.sort((a, b) => b.count - a.count);\n        obj = obj.slice(0, size);\n        setTopTen(obj);\n        console.log(topTen);\n\n    }, [displayTweets]);\n    const Retweeting = (id) => {\n\n        for (let i = 0; i < topTen.length; i++) {\n            if (id == i) {\n                topTen[i].count = topTen[i].count + 1;\n                setTopTen([...topTen])\n                var obj = [...topTen];\n                obj.sort((a, b) => b.count - a.count);\n                obj = obj.slice(0, size);\n                setTopTen(obj);\n            }\n        }\n\n    }\n    useEffect(() => {\n        console.log(topTen);\n    }, [topTen]);\n\n    return (\n        <Style>\n            <div className='center'>\n                <Link to={{\n                    pathname: \"/tweets\",\n                    state: {\n                        displayTweets: displayTweets\n                    }\n\n                }}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-90deg-left\" viewBox=\"0 0 16 16\">\n                        <path fill-rule=\"evenodd\" d=\"M1.146 4.854a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H12.5A2.5 2.5 0 0 1 15 6.5v8a.5.5 0 0 1-1 0v-8A1.5 1.5 0 0 0 12.5 5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4z\" />\n                    </svg></Link>\n                <h4>Trending Tweets</h4>\n                {topTen &&\n                    topTen.map((topTen, index) => (\n                        <>\n                            <div className='card'>\n                                <div className='card-header'>\n                                    <span className=\"d-inline-block btn float-left\">\n                                        <Icons.PersonBoundingBox />\n                                        <span className=\"d-inline-block anonymousfont\">Anonymous</span>\n                                    </span>\n\n                                </div>\n                                <div className='card-body'>\n                                    {topTen.tweet}\n                                    <br />\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-heart\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8 2.748l-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z\" />\n                                    </svg>&nbsp;\n                          {topTen.count} &nbsp;\n\n                          <a onClick={(e) => Retweeting(index, e)}>\n                                        <FontAwesomeIcon icon={faRetweet} />\n                                    </a>\n                                </div>\n                            </div>\n                            <br />\n                        </>\n                    )\n                    )\n                }\n            </div>\n        </Style>\n    )\n\n};\n\nexport default ReTweet;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons';\nimport * as Bootstrap from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport * as Icons from 'react-bootstrap-icons';\n\nimport ReTweet from \"./ReTweet.js\";\n\n\nconst Style = styled.div`\n.anonymousfont{ \nfont-weight: bold;\nfont-style: italic;\n},\n.card{\n    \n    width:500px;\n}\n.center {\n    margin: auto;\n    width: 50%;    \n    padding: 10px;       \n  }\n`\n\nconst TwitterClone = (props) => {\n\n\n    const [displayTweets, setDisplayTweets] = useState([{\n        'tweet': \"Hi, this is the 1st tweet\",\n        'count': 0\n    },\n    {\n        'tweet': \"Hello, this is the 2nd tweet\",\n        'count': 4\n    },\n    {\n        'tweet': \"Hey, 3rd tweet\",\n        'count': 7\n    }]);\n\n\n    const [newTweet, setNewTweet] = useState(\"\");\n    const [messagePresent, setMessagePresent] = useState(false);\n    const [charCount, setCharCount] = useState(140);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const refresh = () => {\n        setNewTweet(\"\");\n        setCharCount(140);\n    };\n\n\n    const handleChange = (e) => {\n        setNewTweet(e.target.value);\n        setCharCount(140 - (e.target.value.length));\n    };\n    const handleClose = () => {\n        setMessagePresent(false);\n        refresh();\n    }\n\n    const addTweet = (e) => {\n        if (newTweet == \"\") {\n            setErrorMessage('Cannot create empty tweet!Please add text');\n            setMessagePresent(true);\n        }\n        if (newTweet.length > 140) {\n            setErrorMessage('Exceeds 140 Characters');\n            setMessagePresent(true);\n        }\n\n        setDisplayTweets(displayTweets.concat({ 'tweet': newTweet, 'count': 0 }));\n        setCharCount(140);\n\n        setNewTweet(\"\");\n    }\n\n\n\n    const Retweeting = (id) => {\n\n        for (let i = 0; i < displayTweets.length; i++) {\n            if (id == i) {\n                displayTweets[i].count = displayTweets[i].count + 1;\n                setDisplayTweets([...displayTweets])\n            }\n        }\n\n    }\n    var tweetsSet = false;\n\n    useEffect(() => {\n        if ('location' in props && !tweetsSet) {\n            console.log(props.location.state.displayTweets);\n            setDisplayTweets(props.location.state.displayTweets);\n            tweetsSet = true;\n        }\n        console.log(props)\n    }, [props]);\n\n    \n    return (\n        <Style>\n\n            <div className='center'>\n                <h1>Twitter Test</h1>\n                <div className='card'>\n                    <Bootstrap.Modal show={messagePresent} onHide={handleClose}>\n                        <Bootstrap.Modal.Header closeButton>\n                            <Bootstrap.Modal.Title>Message</Bootstrap.Modal.Title>\n                        </Bootstrap.Modal.Header>\n                        <Bootstrap.Modal.Body>{errorMessage}</Bootstrap.Modal.Body>\n                    </Bootstrap.Modal>\n                    <div className='card-header'>\n                        New Tweet\n                </div>\n                    <div className='card-body'>\n                        <input\n                            type='text'\n                            maxLength=\"140\"\n                            value={newTweet}\n                            onChange={handleChange}\n                        /><br />\n                        <small>Characters {charCount}\n                        </small>\n                        <br />\n                        <button type='submit' onClick={addTweet} className='btn-primary'>Tweet\n                    </button>\n                    </div>\n                </div>\n                <br /><br />\n\n                {displayTweets &&\n                    displayTweets.map((displayTweet, index) => (\n                        <>\n                            <div className='card'>\n                                <div className='card-header'>\n                                    <span className=\"d-inline-block btn float-left\">\n                                        <Icons.PersonBoundingBox />\n                                        <span className=\"d-inline-block anonymousfont\">Anonymous</span>\n                                    </span>\n\n                                </div>\n                                <div className='card-body'>\n                                    {displayTweet.tweet}\n                                    <br />\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-heart\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8 2.748l-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z\" />\n                                    </svg>\n&nbsp;&nbsp;&nbsp;\n                          {displayTweet.count} &nbsp;\n                              <Link to={{\n                                        pathname: \"/retweet\",\n                                        state: {\n                                            displayTweets: displayTweets\n                                        }\n                                    }}\n                                        onClick={(e) => Retweeting(index, e)}>\n                                        <FontAwesomeIcon icon={faRetweet} />\n                                    </Link>\n\n                                </div>\n                            </div>\n                            <br />\n                        </>\n                    )\n                    )\n                }\n            </div>\n        </Style>\n\n    )\n};\n\nexport default TwitterClone;","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport TwitterClone from '../src/component/twitterclone.js';\nimport ReTweet from './component/ReTweet';\n\nfunction App() {\n  return (  \n    <>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\" integrity=\"sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\" crossorigin=\"anonymous\"/>\n    <div id=\"app\"></div>\n    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\" integrity=\"sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\" integrity=\"sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\" crossorigin=\"anonymous\"></script>\n      \n    <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" exact render={props=><TwitterClone DisplayTweet={[]}/>} />      \n      <Route path=\"/tweets\"  render={props => <TwitterClone {...props} />} />      \n      <Route path=\"/retweet\" exact render={props => <ReTweet {...props} />} />      \n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>,\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(  \n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}